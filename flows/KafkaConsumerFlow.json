{
	"schemaVersion": "4",
	"info": {
		"name": "Kafka Payment consumer flow",
		"description": "Example of how to consume messages from a Kafka topic."
	},
	"parameter": {
		"properties": {
			"request": {
				"description": "The request"
			},
			"config": {
				"type": "object",
				"description": "The service's configuration"
			},
			"env": {
				"type": "object",
				"description": "The host OS environment"
			}
		},
		"additionalProperties": false
	},
	"start": "javascript.1",
	"nodes": {
		"javascript.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Message Received from Kafka Topic",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"console.log('KafkaConsumer flow received message from Kafka topic:', data.request.value);\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"productinventory.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"productinventory.1": {
			"type": "nodehandler://api-builder-flow-invoke/model/mysql/productinventory",
			"name": "Find by ID",
			"method": "findByID",
			"parameters": [
				{
					"name": "id",
					"type": "jsonpath",
					"value": "$.request.value.productId",
					"metaName": "id"
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"condition.1"
					],
					"context": "$.foundByID",
					"metaName": "Next"
				},
				"notfound": {
					"routes": [],
					"metaName": "Not Found"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Find by ID"
		},
		"javascript.2": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Deduct Inventory",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"var reqQuantity = data.request.value.quantity;\\n  var inventoryQuantity = data.foundByID.quantity;\\n  console.log(\\\"Requested quanity \\\" + reqQuantity);\\n  console.log(\\\"Inventory quanity \\\" + inventoryQuantity);\\n  if( inventoryQuantity >= reqQuantity ){\\n    inventoryQuantity = inventoryQuantity - reqQuantity;\\n    data.foundByID.quantity = inventoryQuantity;\\n    return true;\\n  }\\n  throw new Error('insufficient inventory');\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"productinventory.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"javascript.4"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"productinventory.2": {
			"type": "nodehandler://api-builder-flow-invoke/model/mysql/productinventory",
			"name": "Update",
			"method": "update",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$.foundByID",
					"metaName": "data"
				},
				{
					"name": "id",
					"type": "jsonpath",
					"value": "$.request.value.productId",
					"metaName": "id"
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"javascript.3"
					],
					"context": "$.updated",
					"metaName": "Next"
				},
				"notfound": {
					"routes": [],
					"metaName": "Not Found"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Update"
		},
		"javascript.3": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Status INVENTORYSUCCESS",
			"method": "Execute",
			"parameters": [
				{
					"name": "code",
					"type": "string",
					"value": "\"data.request.value.status = 'INVENTORYSUCCESS';\\n  console.log(data.request.value);\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				},
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"kafka.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"kafka.1": {
			"type": "nodehandler://@axway/api-builder-plugin-ft-kafka/kafka",
			"name": "Publish JSON",
			"method": "publishJSON",
			"parameters": [
				{
					"name": "channelId",
					"type": "string",
					"value": "\"kafka-1\"",
					"metaName": "Channel ID",
					"metaDescription": "The Kafka channel ID as configured in triggers/kafka.yml."
				},
				{
					"name": "message",
					"type": "jsonpath",
					"value": "$.request.value",
					"metaName": "Message",
					"metaDescription": "The message to publish."
				},
				{
					"name": "topic",
					"type": "string",
					"value": "\"inventory-events\"",
					"metaName": "Topic",
					"metaDescription": "The topic."
				}
			],
			"outputs": {
				"next": {
					"routes": [],
					"metaName": "Next"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Publish JSON"
		},
		"javascript.4": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Status INVENTORYREJECTED",
			"method": "Execute",
			"parameters": [
				{
					"name": "code",
					"type": "string",
					"value": "\"data.request.value.status = 'INVENTORYREJECTED';\\n  console.log(data.request.value);\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				},
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"kafka.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"condition.1": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Equals PENDING",
			"method": "equals",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.request.value.status",
					"metaName": "Source",
					"metaDescription": "The input to test."
				},
				{
					"name": "value",
					"type": "string",
					"value": "\"PENDING\"",
					"metaName": "Value",
					"metaDescription": "The value to test input against."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"javascript.2"
					],
					"context": "$.equals",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"condition.2"
					],
					"context": "$.equals",
					"metaName": "False"
				}
			},
			"metaMethod": "Equals"
		},
		"javascript.5": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Credit Inventory",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"var reqQuantity = data.request.value.quantity;\\n  var inventoryQuantity = data.foundByID.quantity;\\n  console.log(\\\"Inentory to be credited \\\" + reqQuantity);\\n  console.log(\\\"Inventory quanity \\\" + inventoryQuantity);\\n  \\n  inventoryQuantity = inventoryQuantity + reqQuantity;\\n  data.foundByID.quantity = inventoryQuantity;\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"condition.2": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Equals REJECTED",
			"method": "equals",
			"parameters": [
				{
					"name": "value",
					"type": "string",
					"value": "\"INVENTORYREJECTED\"",
					"metaName": "Value",
					"metaDescription": "The value to test input against."
				},
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.request.value.status",
					"metaName": "Source",
					"metaDescription": "The input to test."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"javascript.5"
					],
					"context": "$.equals",
					"metaName": "True"
				},
				"false": {
					"routes": [],
					"context": "$.equals",
					"metaName": "False"
				}
			},
			"metaMethod": "Equals"
		}
	}
}